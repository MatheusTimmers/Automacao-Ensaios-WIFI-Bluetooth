<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ivi.Digitizer</name>
    </assembly>
    <members>
        <member name="T:Ivi.Digitizer.AcquisitionStatusResult">
            <summary>
            Defined values for the acquisition status result.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.AcquisitionStatusResult.True">
            <summary>
            The digitizer is currently in the Idle state.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.AcquisitionStatusResult.False">
            <summary>
            The digitizer is not currently in the Idle state.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.AcquisitionStatusResult.Unknown">
            <summary>
            The driver cannot query the instrument to determine if the digitizer is in the Idle state.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.ArmSourceOperator">
            <summary>
            Defined values for the arm source operator.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.ArmSourceOperator.And">
            <summary>
            Arm sources are AND'd together. The digitizer arms when all configured arm source conditions are satisfied.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.ArmSourceOperator.Or">
            <summary>
            Arm sources are OR'd together. The digitizer arms when the first configured arm source condition is
            satisfied.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.ArmSourceOperator.None">
            <summary>
            No operator is applied to the configured list of arm sources. The arm source list is ignored, and the
            digitizer arms when the currently configured arm source, given by the Active Arm Source property, and
            its associated arm conditions are satisfied.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.ArmType">
            <summary>
            Defined values for arm type.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.ArmType.Edge">
            <summary>
            The digitizer is configured for edge arming. An edge arm occurs when the arm signal specified
            with the Arm Source property passes the voltage threshold specified with the Arm Level
            property and has the slope specified with the Arm Slope property.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.ArmType.Width">
            <summary>
            The digitizer is configured for width arming. Use the IviDigitizerWidthTrigger extension properties and
            methods to configure the arm.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.ArmType.Runt">
            <summary>
            The digitizer is configured for runt arming. Use the IviDigitizerRuntTrigger extension properties and
            methods to configure the arm.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.ArmType.Glitch">
            <summary>
            The digitizer is configured for glitch arming. Use the IviDigitizerGlitchTrigger extension properties
            and methods to configure the arm.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.ArmType.TV">
            <summary>
            The digitizer is configured for arming on TV signals. Use the IviDigitizerTVTrigger extension properties
            and methods to configure the arm.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.ArmType.Window">
            <summary>
            The digitizer is configured for window arming. Use the IviDigitizerWindowTrigger extension properties and
            methods to configure the arm.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.GlitchCondition">
            <summary>
            Defined values for glitch arm/trigger condition.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.GlitchCondition.LessThan">
            <summary>
            The digitizer arms/triggers when the pulse width is less than the value you specify with the
            Glitch Arm/Trigger Width property.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.GlitchCondition.GreaterThan">
            <summary>
            The digitizer arms/triggers when the pulse width is greater than the value you specify with the
            Glitch Arm/Trigger Width property.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.GlitchPolarity">
            <summary>
            Defined values for glitch arm/trigger polarity.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.GlitchPolarity.Positive">
            <summary>
            The digitizer arms/triggers on a positive glitch.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.GlitchPolarity.Negative">
            <summary>
            The digitizer arms/triggers on a negative glitch.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.GlitchPolarity.Either">
            <summary>
            The digitizer arms/triggers on either a positive or negative glitch.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.Errors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.Errors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.Errors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.Errors.ArmNotSoftware">
            <summary>
              Looks up a localized string similar to The arm source is not set to software arm..
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.Errors.ArmSource">
            <summary>
              Looks up a localized string similar to Actual arm source: .
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.Errors.ChannelName">
            <summary>
              Looks up a localized string similar to Channel name: .
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.Errors.ChannelNotEnabled">
            <summary>
              Looks up a localized string similar to The channel is not enabled for measurement..
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.Errors.IncompatibleFetch">
            <summary>
              Looks up a localized string similar to Records to acquire &gt;1, multi-record acquisition fetch must be used..
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.Errors.RecordsToAcquire">
            <summary>
              Looks up a localized string similar to Records to acquire: .
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.ArmNotSoftwareException">
            <summary>
            An error occurred while trying to send an arm trigger.
            </summary>
            <remarks>
            This exception is used to report that the specified arm source is not set to software arm.
            </remarks>
        </member>
        <member name="M:Ivi.Digitizer.ArmNotSoftwareException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.ArmNotSoftwareException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Digitizer.ArmNotSoftwareException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner
            exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Digitizer.ArmNotSoftwareException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message and the name of the arm source that was not set to software arm.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="armSource">The name of the arm source.</param>
        </member>
        <member name="M:Ivi.Digitizer.ArmNotSoftwareException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Digitizer.ArmNotSoftwareException.ArmSource">
            <summary>
            Gets the name of the arm source.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.ArmNotSoftwareException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.ChannelNotEnabledException">
            <summary>
            The channel is not enabled for measurement.
            </summary>
            <remarks>
            This exception is used to report that the specified channel is not enabled for measurement.
            </remarks>
        </member>
        <member name="M:Ivi.Digitizer.ChannelNotEnabledException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.ChannelNotEnabledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Digitizer.ChannelNotEnabledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner
            exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Digitizer.ChannelNotEnabledException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message and the name of the arm source that was not set to software arm.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="channelName">The name of the channel.</param>
        </member>
        <member name="M:Ivi.Digitizer.ChannelNotEnabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Digitizer.ChannelNotEnabledException.ChannelName">
            <summary>
            Gets the name of the channel.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.ChannelNotEnabledException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IncompatibleFetchException">
            <summary>
            An error occurred while trying to fetch a single record when multiple records were expected.
            </summary>
            <remarks>
            This exception is used to report that the user attempted to fetch a single record when the digitizer was set to
            acquire multiple records.
            </remarks>
        </member>
        <member name="M:Ivi.Digitizer.IncompatibleFetchException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IncompatibleFetchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Digitizer.IncompatibleFetchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with a specified error message and a reference to the inner
            exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Digitizer.IncompatibleFetchException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message and the name of the arm source that was not set to software arm.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="recordsToAcquire">The number of records that the digitizer is set to acquire.</param>
        </member>
        <member name="M:Ivi.Digitizer.IncompatibleFetchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized  object data about the
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual  information about the
            source or destination.</param>
        </member>
        <member name="P:Ivi.Digitizer.IncompatibleFetchException.RecordsToAcquire">
            <summary>
            Gets the name of the arm source.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IncompatibleFetchException.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerTriggerGlitch">
            <summary>
            IVI Digitizer class-compliant glitch triggering interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerTriggerGlitch.Configure(System.Double,Ivi.Driver.PrecisionTimeSpan,Ivi.Digitizer.GlitchPolarity,Ivi.Digitizer.GlitchCondition)">
            <summary>
            This method configures the glitch trigger. A glitch trigger occurs when the trigger signal has a pulse
            with a width that is less than or greater than the glitch width. The end user specifies which comparison
            criterion to use with the GlitchCondition parameter. The end-user specifies the glitch width with the
            GlitchWidth parameter. The end-user specifies the polarity of the pulse with the GlitchPolarity parameter.
            The trigger does not actually occur until the edge of a pulse that corresponds to the GlitchWidth and
            GlitchPolarity crosses the threshold the end-user specifies in the TriggerLevel parameter. This method
            affects instrument behavior only if the Trigger Type property is Glitch. Set the Trigger Type and Trigger
            Coupling properties before calling this method.
            </summary>
            <param name="level">The trigger level. This value sets the Trigger Level property.</param>
            <param name="width">The glitch width. This value sets the Glitch Width property.</param>
            <param name="polarity">The glitch polarity. This value sets the Glitch Polarity property.</param>
            <param name="condition">The glitch condition. This value sets the Glitch Condition property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerGlitch.Condition">
            <summary>
            The glitch condition. This property determines whether the glitch trigger happens when the
            digitizer detects a pulse with a width less than or greater than the width value.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerGlitch.Polarity">
            <summary>
            The polarity of the glitch that triggers the digitizer.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerGlitch.Width">
            <summary>
            The glitch width. The digitizer triggers when it detects a pulse with a width less than or greater
            than this value, depending on the Glitch Condition property.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerTriggerEdge">
            <summary>
            IVI Digitizer class-compliant edge triggering interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerTriggerEdge.Configure(System.Double,Ivi.Digitizer.Slope)">
            <summary>
            This method sets the edge triggering properties. An edge trigger occurs when the trigger signal for the
            TriggerSource passes through the voltage threshold that the end-user
            specifies with the level parameter and has the slope that the end-user specifies with the slope parameter.
            This method affects instrument behavior only if the Trigger Type property is Edge Trigger. Set the Trigger Type
            and Trigger Coupling properties before calling this method. If the trigger source is one of the analog input
            channels, an application program should configure the vertical range, vertical coupling,
            and the maximum input frequency before calling this method.
            </summary>
            <param name="level">Specifies the trigger level. This value sets the Trigger Level property.</param>
            <param name="slope">Specifies the trigger slope. This value sets the Trigger Slope property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerEdge.Slope">
            <summary>
            Specifies whether a rising or a falling edge triggers the digitizer. This property affects instrument
            operation only when the Trigger Type property is set to Edge.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizer">
            <summary>
            IVI Digitizer class-compliant root interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizer.Acquisition">
            <summary>
            Reference to the class-compliant IIviDigitizerAcquisition interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizer.Arm">
            <summary>
            Reference to the class-compliant IIviDigitizerArm interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizer.Calibration">
            <summary>
            Reference to the class-compliant IIviDigitizerCalibration interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizer.Channels">
            <summary>
            Reference to the class-compliant IIviDigitizerChannelCollection interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizer.ReferenceOscillator">
            <summary>
            Reference to the class-compliant IIviDigitizerReferenceOscillator interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizer.SampleClock">
            <summary>
            Reference to the class-compliant IIviDigitizerSampleClock interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizer.Temperature">
            <summary>
            Reference to the class-compliant IIviDigitizerTemperature interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizer.Trigger">
            <summary>
            Reference to the class-compliant IIviDigitizerTrigger interface.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerAcquisition">
            <summary>
            IVI Digitizer class-compliant acquisition interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerAcquisition.Abort">
            <summary>
            Aborts an acquisition and returns the digitizer to the Idle state.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerAcquisition.ConfigureAcquisition(System.Int64,System.Int64,System.Double)">
            <summary>
            This method configures the most commonly configured properties of the digitizer acquisition sub-system.
            These properties are the samples per record, the number of records to acquire, and the sample rate.
            </summary>
            <param name="numberOfRecordsToAcquire">Specifies the number of records in the acquisition. This value sets the
            Num Records to Acquire property.</param>
            <param name="recordSize">Specifies the number of samples in each record. This value sets the Record Size
            property.</param>
            <param name="sampleRate">Specifies the sample rate in samples per second. This value sets the Sample Rate
            property.</param>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerAcquisition.CreateWaveformDouble(System.Int64)">
            <summary>
            Creates a waveform object of type Double that can be used with Read and Fetch methods.
            </summary>
            <param name="size">Number of elements in the waveform. If zero, the driver will create a waveform with
            a number of samples based on the current driver configuration.</param>
            <returns>Waveform object with elements of type Double.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerAcquisition.CreateWaveformInt32(System.Int64)">
            <summary>
            Create a waveform object of type Int32 that can be used with Read and Fetch methods.
            </summary>
            <param name="size">Number of elements in the waveform. If zero, the driver will create a waveform with
            a number of samples based on the current driver configuration.</param>
            <returns>Waveform object with elements of type Int32.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerAcquisition.CreateWaveformInt16(System.Int64)">
            <summary>
            Create a waveform object of type Int16 that can be used with Read and Fetch methods.
            </summary>
            <param name="size">Number of elements in the waveform. If zero, the driver will create a waveform with
            a number of samples based on the current driver configuration.</param>
            <returns>Waveform object with elements of type Int16.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerAcquisition.CreateWaveformSByte(System.Int64)">
            <summary>
            Create a waveform object of type SByte that can be used with Read and Fetch methods.
            </summary>
            <param name="size">Number of elements in the waveform. If zero, the driver will create a waveform with
            a number of samples based on the current driver configuration.</param>
            <returns>Waveform object with elements of type SByte.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerAcquisition.CreateWaveformCollectionDouble(System.Int64,System.Int64)">
            <summary>
            Create a collection of waveform objects of type Double that can be used with multi-record Read and Fetch methods.
            </summary>
            <param name="numberOfWaveforms">The number of waveforms in the collection. If zero, the driver will create a
            waveform collection with a number of waveforms based on the current driver configuration.</param>
            <param name="sizePerWaveform">The number of elements in each waveform in the collection. If zero, the driver
            will create each waveform with a number of elements based on the current driver configuration.</param>
            <returns>A collection of waveform objects with elements of type Double.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerAcquisition.CreateWaveformCollectionInt32(System.Int64,System.Int64)">
            <summary>
            Create a collection of waveform objects of type Int32 that can be used with multi-record Read and Fetch methods.
            </summary>
            <param name="numberOfWaveforms">The number of waveforms in the collection. If zero, the driver will create a
            waveform collection with a number of waveforms based on the current driver configuration.</param>
            <param name="sizePerWaveform">The number of elements in each waveform in the collection. If zero, the driver
            will create each waveform with a number of elements based on the current driver configuration.</param>
            <returns>A collection of waveform objects with elements of type Int32.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerAcquisition.CreateWaveformCollectionInt16(System.Int64,System.Int64)">
            <summary>
            Create a collection of waveform objects of type Int16 that can be used with multi-record Read and Fetch methods.
            </summary>
            <param name="numberOfWaveforms">The number of waveforms in the collection. If zero, the driver will create a
            waveform collection with a number of waveforms based on the current driver configuration.</param>
            <param name="sizePerWaveform">The number of elements in each waveform in the collection. If zero, the driver
            will create each waveform with a number of elements based on the current driver configuration.</param>
            <returns>A collection of waveform objects with elements of type Int16.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerAcquisition.CreateWaveformCollectionSByte(System.Int64,System.Int64)">
            <summary>
            Create a collection of waveform objects of type SByte that can be used with multi-record Read and Fetch methods.
            </summary>
            <param name="numberOfWaveforms">The number of waveforms in the collection. If zero, the driver will create a
            waveform collection with a number of waveforms based on the current driver configuration.</param>
            <param name="sizePerWaveform">The number of elements in each waveform in the collection. If zero, the driver
            will create each waveform with a number of elements based on the current driver configuration.</param>
            <returns>A collection of waveform objects with elements of type SByte.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerAcquisition.Initiate">
            <summary>
            Initiates a waveform acquisition. The digitizer leaves the Idle state and waits for a trigger. The digitizer
            acquires a waveform for each enabled channel.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerAcquisition.QueryMinWaveformMemory(System.Int32,System.Int64,System.Int64,System.Int64)">
            <summary>
            This method is used to determine the minimum amount of memory that is needed to fetch or read data from
            the digitizer with maximum performance.
            </summary>
            <param name="dataWidth">Specifies the size of the sampled data that will be retrieved. The value of this
            parameter must be 8, 16, 32 or 64, corresponding to the intended Read/Fetch method.</param>
            <param name="numberOfRecords">Specifies the number of records that will be read.</param>
            <param name="offsetWithinRecord">Specifies the start index within the record from which the data should be
            retrieved.</param>
            <param name="numberOfPointsPerRecord">Specifies the number of data points to return.</param>
            <returns>The minimum buffer size in samples needed for a subsequent Read or Fetch call with the same readout
            parameters.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerAcquisition.WaitForAcquisitionComplete(Ivi.Driver.PrecisionTimeSpan)">
            <summary>
            Waits until the configured acquisition is complete. If no acquisition is currently running, this method
            returns immediately. If the acquisition does not complete within the time period the user specified with the
            maxTime parameter, the method throws the Max Time Exceeded exception.
            </summary>
            <param name="maxTime">Specifies the maximum time the end-user allows for this method to complete. If
            maxTime is PrecisionTimeSpan.MaxValue, the method waits indefinitely for the acquisition to complete.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisition.MaxFirstValidPointValue">
            <summary>
            The maximum value that the First Valid Point parameter of the readout methods may assume. This
            value is necessary to calculate the minimum size of the required data buffer to retrieved the entire
            acquisition.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisition.MaxSamplesPerChannel">
            <summary>
            The maximum number of samples per channel that can be captured.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisition.MinRecordSize">
            <summary>
            The minimum waveform record size. If the digitizer can support any arbitrary size record, then
            this property returns 1.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisition.NumberOfAcquiredRecords">
            <summary>
            The total number of records acquired since the acquistion was last initiated. You may read the value of
            this property while an acquisition is in progress.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisition.NumberOfRecordsToAcquire">
            <summary>
            The number of waveform records to acquire. One waveform record is acquired for each recognized
            trigger.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisition.RecordSize">
            <summary>
            The number of samples to acquire in each waveform record.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisition.SampleMode">
            <summary>
            The sample mode used by the digitizer.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisition.SampleRate">
            <summary>
            The rate of the sample clock in samples per second. This number represents the inverse of the
            interval between samples in the acquisition record.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisition.Status">
            <summary>
            Reference to the IIviDigitizerAcquisitionStatus interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisition.TimeInterleavedChannelListAuto">
            <summary>
            Specifies whether or not the instrument should automatically combine enabled channels to satisfy
            user-specified sample rates. When set to True, the instrument will automatically combine channels to meet
            the sample rate requirements specified via the Sample Rate property.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerAcquisitionStatus">
            <summary>
            IVI Digitizer class-compliant acquisition status interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisitionStatus.IsIdle">
            <summary>
            Indicates whether the device is currently in the Idle state. If the driver cannot query the digitizer to
            return its state, the driver returns the value Unknown.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisitionStatus.IsMeasuring">
            <summary>
            Indicates whether the device is currently in the Measuring state. If the driver cannot query the digitizer
            to return its state, the driver returns the value Unknown.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisitionStatus.IsWaitingForArm">
            <summary>
            Indicates whether the device is currently in the Waiting For Arm state. If the driver cannot query the
            digitizer to return its state, the driver returns the value Unknown.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerAcquisitionStatus.IsWaitingForTrigger">
            <summary>
            Indicates whether the device is currently in the Waiting For Trigger state. If the driver cannot query the
            digitizer to return its state, the driver returns the value Unknown.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerArm">
            <summary>
            IVI Digitizer class-compliant arm interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerArm.SendSoftwareArm">
            <summary>
            This method follows semantics similar to Send Software Trigger. Refer to IVI-3.3: Standard Cross-Class
            Capabilities Specification for the prototype and complete description of the Send Software Trigger method.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArm.ActiveSource">
            <summary>
            Specifies the source the digitizer monitors for the arm event. The value specified here must be one of the
            valid repeated capability names for the ArmSource repeated capability.
            [Refer to the instrument driver documentation for valid values, which may include
            one or more of the standard values defined in Ivi.Driver.TriggerSource.]
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArm.Count">
            <summary>
            The number of times the arm has to occur to complete the arm loop; that is, the number of arms
            that are accepted before the acquisition must be initiated again.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArm.Delay">
            <summary>
            The delay from when the arm logic is satisfied until the waiting for trigger state is entered.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArm.MultiArm">
            <summary>
            Reference to the class-compliant IIviDigitizerArmMultiArm interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArm.OutputEnabled">
            <summary>
            Specifies whether or not an accepted arm appears at an output of the digitizer.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArm.Sources">
            <summary>
            Reference to the IIviDigitizerArmSources interface.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerArmEdge">
            <summary>
            IVI Digitizer class-compliant edge arming interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerArmEdge.Configure(System.Double,Ivi.Digitizer.Slope)">
            <summary>
            This method sets the edge arming properties. An edge occurs when the arm signal for the ArmSource
            passes through the voltage threshold that the end-user specifies with
            the level parameter and has the slope that the end-user specifies with the slope parameter. This method
            affects instrument behavior only if the Arm Type property is Edge. Set the Arm Type and Arm Coupling properties
            before calling this method. If the arm source is one of the analog input channels, an application program should
            configure the vertical range, vertical coupling, probe attenuation, and the maximum input frequency before
            calling this method.
            </summary>
            <param name="level">Specifies the arm level. This value sets the Trigger Level property.</param>
            <param name="slope">Specifies the trigger slope. This value sets the Trigger Slope property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmEdge.Slope">
            <summary>
            Specifies whether a rising or a falling edge arms the digitizer. This property affects instrument operation
            only when the Arm Type property is set to Edge.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerArmGlitch">
            <summary>
            IVI Digitizer class-compliant glitch arming interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerArmGlitch.Configure(System.Double,Ivi.Driver.PrecisionTimeSpan,Ivi.Digitizer.GlitchPolarity,Ivi.Digitizer.GlitchCondition)">
            <summary>
            This method configures the glitch arm. A glitch arm occurs when the arm signal has a pulse with a width
            that is less than or greater than the glitch width. The end user specifies which comparison criterion to
            use with the GlitchCondition parameter. The end-user specifies the glitch width with the GlitchWidth
            parameter. The end-user specifies the polarity of the pulse with the GlitchPolarity parameter. The arm does
            not actually occur until the edge of a pulse that corresponds to the GlitchWidth and GlitchPolarity crosses
            the threshold the end-user specifies in the TriggerLevel parameter. This method affects instrument
            behavior only if the Arm Type property is Glitch. Set the Arm Type and Arm Coupling properties before calling this method.
            </summary>
            <param name="level">The arm level. This value sets the Arm Level property.</param>
            <param name="width">The glitch width. This value sets the Glitch Width property.</param>
            <param name="polarity">The glitch polarity. This value sets the Glitch Polarity property.</param>
            <param name="condition">The glitch condition. This value sets the Glitch Condition property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmGlitch.Condition">
            <summary>
            The glitch condition. This property determines whether the glitch arm happens when the digitizer
            detects a pulse with a width less than or greater than the width value.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmGlitch.Width">
            <summary>
            The glitch width. The digitizer triggers when it detects a pulse with a width less than or greater
            than this value, depending on the Glitch Condition property.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmGlitch.Polarity">
            <summary>
            The polarity of the glitch that arms the digitizer.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerArmRunt">
            <summary>
            IVI Digitizer class-compliant runt arming interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerArmRunt.Configure(System.Double,System.Double,Ivi.Digitizer.RuntPolarity)">
            <summary>
            This method configures the runt arm. A runt occurs when the arm signal crosses one of the runt thresholds
            twice without crossing the other runt threshold. The end-user specifies the runt thresholds with the
            thresholdLow and thresholdHigh parameters. The end-user specifies the polarity of the runt with the polarity
            parameter. This method affects instrument behavior only if the Arm Type property is Runt. Set the Arm Type
            and Arm Coupling properties before calling this method.
            </summary>
            <param name="thresholdLow">The runt arming low threshold. This value sets the ArmRunt ThresholdLow property.</param>
            <param name="thresholdHigh">The runt arming high threshold. This value sets the ArmRunt ThresholdHigh property.</param>
            <param name="polarity">The runt arming polarity. This value sets the ArmRunt Polarity property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmRunt.Polarity">
            <summary>
            The runt polarity.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmRunt.ThresholdHigh">
            <summary>
            The runt triggering high threshold in Volts.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmRunt.ThresholdLow">
            <summary>
            The runt triggering low threshold in Volts.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerArmSource">
            <summary>
            IVI Digitizer class-compliant arm source interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmSource.Coupling">
            <summary>
            Specifies how the digitizer couples the arm source.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmSource.Edge">
            <summary>
            Reference to the class-compliant IIviDigitizerArmEdge interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmSource.Glitch">
            <summary>
            Reference to the class-compliant IIviDigitizerArmGlitch interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmSource.Hysteresis">
            <summary>
            The arm hysteresis in Volts.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmSource.Level">
            <summary>
            The voltage threshold for the arm sub-system. The units are Volts. This property affects
            instrument behavior only when the Arm Type property is set to one of the following values:
            Edge, Glitch, or Width.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmSource.Runt">
            <summary>
            Reference to the class-compliant IIviDigitizerArmRunt interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmSource.TV">
            <summary>
            Reference to the class-compliant IIviDigitizerArmTV interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmSource.Type">
            <summary>
            The kind of event that arms the digitizer.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmSource.Width">
            <summary>
            Reference to the class-compliant IIviDigitizerArmWidth interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmSource.Window">
            <summary>
            Reference to the class-compliant IIviDigitizerArmWindow interface.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerArmSourceCollection">
            <summary>
            IVI Digitizer class-compliant arm source collection interface.
            [Refer to the instrument driver documentation for valid arm source names, which may include
            one or more of the standard values defined in Ivi.Driver.TriggerSource.]
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerArmTV">
            <summary>
            IVI Digitizer class-compliant TV arming interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerArmTV.Configure(Ivi.Digitizer.TVSignalFormat,Ivi.Digitizer.TVTriggerEvent,Ivi.Digitizer.TVTriggerPolarity)">
            <summary>
            This method configures the digitizer for TV arming. It configures the TV signal format, the event and the
            signal polarity. This method affects instrument behavior only if the Arm Type property is TV. Set the Arm Type
            and Arm Coupling properties before calling this method. 
            </summary>
            <param name="signalFormat">Specifies the TV arm signal format. This value sets the TV Arm Signal Format
            property.</param>
            <param name="triggerEvent">Specifies the TV arm event. This value sets the TV Arm Event property.</param>
            <param name="polarity">Specifies the polarity of the TV arm signal. This value sets the TV Arm Polarity
            property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmTV.LineNumber">
            <summary>
            The line on which the digitizer arms. The driver uses this property when the TV Arm Event is set
            to TV Event Line Number. The line number setting is independent of the field. This means that to arm on the
            first line of the second field, the user must configure the line number to the value of 263 (if we presume
            that field one had 262 lines).
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmTV.Polarity">
            <summary>
            The polarity of the TV signal.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmTV.SignalFormat">
            <summary>
            The format of TV signal on which the digitizer arms.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmTV.TriggerEvent">
            <summary>
            The event on which the digitizer arms.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerArmWidth">
            <summary>
            IVI Digitizer class-compliant width arming interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerArmWidth.Configure(System.Double,Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan,Ivi.Digitizer.WidthPolarity,Ivi.Digitizer.WidthCondition)">
            <summary>
            Configures the width arm level, thresholdLow, thresholdHigh, polarity, and condition. A width arm
            occurs when a pulse, that passes through level, with a width between or outside, the width thresholds is
            detected.
            </summary>
            <param name="level">Arm level. This value sets the Arm Level property.</param>
            <param name="thresholdLow">Width low threshold. This value sets the Width Low Threshold
            property.</param>
            <param name="thresholdHigh">Width high threshold. This value sets the Width High Threshold
            property.</param>
            <param name="polarity">Pulse polarity. This value sets the Width Polarity property.</param>
            <param name="condition">Specifies whether a pulse that is within or outside the user-specified thresholds
            arms the digitizer. This value sets the Width Condition property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmWidth.Condition">
            <summary>
            Specifies whether a pulse that is within or outside the high and low thresholds arms the digitizer. The
            end-user specifies the high and low thresholds with the Width High Threshold and Width Low Threshold properties.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmWidth.Polarity">
            <summary>
            The polarity of the pulse that arms the digitizer.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmWidth.ThresholdHigh">
            <summary>
            The high width threshold time.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmWidth.ThresholdLow">
            <summary>
            The low width threshold time.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerArmWindow">
            <summary>
            IVI Digitizer class-compliant window arming interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerArmWindow.Configure(System.Double,System.Double,Ivi.Digitizer.WindowCondition)">
            <summary>
            Configures the window arm thresholdLow, thresholdHigh, and condition. A window arm occurs when a
            signal that enters or leaves a given voltage range is detected.
            </summary>
            <param name="thresholdLow">Window arming low threshold in Volts. This value sets the Window
            Low Threshold property.</param>
            <param name="thresholdHigh">Window arming high threshold in Volts. This value sets the Window
            High Threshold property.</param>
            <param name="condition">Specifies whether a pulse that is within or outside the user-specified thresholds
            arms the digitizer. This value sets the Width Condition property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmWindow.Condition">
            <summary>
            Specifies whether a signal that is entering or leaving the voltage window defined by the high and low
            thresholds arms the digitizer. The end-user specifies the high and low thresholds with the Window High
            Threshold and Window Low Threshold properties.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmWindow.ThresholdHigh">
            <summary>
            The high window threshold voltage in Volts.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerArmWindow.ThresholdLow">
            <summary>
            The low window threshold voltage in Volts.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerCalibration">
            <summary>
            IVI Digitizer class-compliant calibration interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerCalibration.SelfCalibrate">
            <summary>
            Executes all internal calibrations. If the digitizer does not support self-calibration,
            this method silently succeeds.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerChannel">
            <summary>
            IVI Digitizer class-compliant channel interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannel.Configure(System.Double,System.Double,Ivi.Digitizer.VerticalCoupling,System.Boolean)">
            <summary>
            This method configures the most commonly configured properties of the digitizer channel sub-system.
            These properties are the range, offset, coupling, and whether the channel is enabled.
            </summary>
            <param name="range">Specifies the vertical range. This value sets the Vertical Range property.</param>
            <param name="offset">Specifies the vertical offset. This value sets the Vertical Offset property.</param>
            <param name="coupling">Specifies how to couple the input signal. This value sets the Vertical Coupling property.</param>
            <param name="enabled">Specifies if the channel is enabled for acquisition. This value sets the Channel
            Enabled property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannel.Coupling">
            <summary>
            Specifies how the digitizer couples the input signal for the channel.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannel.DataInterleavedChannelList">
            <summary>
            This property is used to combine this channel with one or more other channels to interleave the returned
            data. The string provided here specifies which channels should operate in combined mode with the current
            channel.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannel.Downconversion">
            <summary>
            Reference to the IIviDigitizerDownconversion interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannel.Enabled">
            <summary>
            Specifies whether the digitizer acquires a waveform for the channel.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannel.Filter">
            <summary>
            Reference to the IIviDigitizerChannelFilter interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannel.InputConnectorSelection">
            <summary>
            Some digitizers include multiple connectors for each digitizer input channel. These connectors are often
            simply a matter of convenience for system cabling - multiple signals can be routed to the various
            connectors, the desired signal can be sent into the digitizer by changing an internal switch. With
            other digitizers, the connectors may be of different types or even different impedances. This property
            is used to determine which connector is to be used.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannel.InputImpedance">
            <summary>
            The input impedance of this channel. The units are Ohms.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannel.Measurement">
            <summary>
            Reference to the IIviDigitizerChannelMeasurement interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannel.MultiRecordMeasurement">
            <summary>
            Reference to the IIviDigitizerChannelMultiRecordMeasurement interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannel.Offset">
            <summary>
            The location of the center of the range that you specify with the Range property. The units are Volts,
            with respect to ground. For example, to acquire a sine wave spanning 0.0 to 10.0 Volts, set Offset to
            5.0 Volts.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannel.Range">
            <summary>
            The absolute value of the input range the digitizer can acquire for the channel. The units are Volts.
            For example, to acquire a sine wave spanning -5.0 to 5.0 Volts, set Range to 10.0 Volts.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannel.Temperature">
            <summary>
            The temperature of the channel. The units are governed by the Temperature Units property.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannel.TimeInterleavedChannelList">
            <summary>
            This property is used to combine this channel with one or more other channels to achieve higher effective
            sampling rates and/or greater memory depth. The string provided here specifies which channels should
            operate in combined mode with the current channel. This property is a comma-separated list of two one or
            more channel names.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerChannelDownconversion">
            <summary>
            IVI Digitizer class-compliant downconversion interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelDownconversion.Configure(System.Boolean,System.Double)">
            <summary>
            Configures how the digitizer performs downconversion.
            </summary>
            <param name="enabled">Enables or disables downversion. The driver uses this value to set the Downconversion
            Enabled property. See the property description for more details.</param>
            <param name="centerFrequency">Specifies the center frequency, in Hz, from which the digitizer should
            downconvert. The driver uses this value to set the Downconversion Center Frequency property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannelDownconversion.CenterFrequency">
            <summary>
            The center frequency, in Hz, from which the digitizer should downconvert.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannelDownconversion.Enabled">
            <summary>
            Enables or disables downconversion. When enabled, the Read and Fetch methods return data according to the
            setting of the Fetch IQ Interleaved Data property.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannelDownconversion.IQInterleaved">
            <summary>
            Controls how the Read and Fetch methods return data when downconversion is enabled. When this property
            is True and downconversion is enabled, the data returned from the Read and Fetch methods is interleaved
            I-Q data points. When this property is False and downconversion is enabled, the Read and Fetch methods
            return data with all I data points in sequence followed by all Q data points. This property has no effect
            when the Downconversion Enabled property is False. 
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerChannelFilter">
            <summary>
            IVI Digitizer class-compliant channel filter interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelFilter.Configure(System.Double,System.Double)">
            <summary>
            This method is used to configure the minimum and maximum input filter frequencies for a specified channel.
            </summary>
            <param name="minFrequency">Specifies the minimum input filter frequency. This value sets the Input Filter
            Min Frequency property.</param>
            <param name="maxFrequency">Specifies the maximum input filter frequency. This value sets the Input Filter
            Max Frequency property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannelFilter.Bypass">
            <summary>
            Specifies whether or not to bypass the input filter.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannelFilter.MaxFrequency">
            <summary>
            The maximum input filter frequency. Specifying a value of zero means that the device should be
            set to the full bandwidth that the filter can deliver without being bypassed. The units are Hertz.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerChannelFilter.MinFrequency">
            <summary>
            The minimum input filter frequency. The units are Hertz.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerChannelMeasurement">
            <summary>
            IVI Digitizer class-compliant measurement interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelMeasurement.FetchWaveform(Ivi.Driver.IWaveform{System.SByte})">
            <summary>
            This method returns the waveform the digitizer acquired for the specified channel. The waveform is from
            a previously initiated acquisition.
            </summary>
            <param name="waveform">The waveform object into which the measurement data is stored. The waveform memory may
            be allocated before calling this method, or during the call to this method. To allocate memory before calling
            this method, create a waveform object using the CreateWaveformSByte method and set the waveform parameter
            to that waveform object. To allocate memory during the call to this method, set the waveform parameter to
            (IWaveform&lt;SByte&gt;)null. Note that this is critically different than setting waveforms to null, which
            generates a build error.</param>
            <returns>A waveform object containing the measurement data.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelMeasurement.FetchWaveform(Ivi.Driver.IWaveform{System.Int16})">
            <summary>
            This method returns the waveform the digitizer acquired for the specified channel. The waveform is from
            a previously initiated acquisition.
            </summary>
            <param name="waveform">The waveform object into which the measurement data is stored. The waveform memory may
            be allocated before calling this method, or during the call to this method. To allocate memory before calling
            this method, create a waveform object using the Create Waveform Int16 method and set the waveform parameter
            to that waveform object. To allocate memory during the call to this method, set the waveform parameter to
            (IWaveform&lt;Int16&gt;)null. Note that this is critically different than setting waveforms to null, which
            generates a build error.</param>
            <returns>A waveform object containing the measurement data.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelMeasurement.FetchWaveform(Ivi.Driver.IWaveform{System.Int32})">
            <summary>
            This method returns the waveform the digitizer acquired for the specified channel. The waveform is from
            a previously initiated acquisition.
            </summary>
            <param name="waveform">The waveform object into which the measurement data is stored. The waveform memory may
            be allocated before calling this method, or during the call to this method. To allocate memory before calling
            this method, create a waveform object using the Create Waveform Int32 method and set the waveform parameter
            to that waveform object. To allocate memory during the call to this method, set the waveform parameter to
            (IWaveform&lt;Int32&gt;)null. Note that this is critically different than setting waveforms to null, which
            generates a build error.</param>
            <returns>A waveform object containing the measurement data.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelMeasurement.FetchWaveform(Ivi.Driver.IWaveform{System.Double})">
            <summary>
            This method returns the waveform the digitizer acquired for the specified channel. The waveform is from
            a previously initiated acquisition.
            </summary>
            <param name="waveform">The waveform object into which the measurement data is stored. The waveform memory may
            be allocated before calling this method, or during the call to this method. To allocate memory before calling
            this method, create a waveform object using the Create Waveform Double method and set the waveform parameter
            to that waveform object. To allocate memory during the call to this method, set the waveform parameter to
            (IWaveform&lt;Double&gt;)null. Note that this is critically different than setting waveforms to null, which
            generates a build error.</param>
            <returns>A waveform object containing the measurement data.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelMeasurement.ReadWaveform(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.IWaveform{System.SByte})">
            <summary>
            Initiates an acquisition on all enabled channels, waits (up to maximumTime) for the acquisition
            to complete, and returns the waveform for this channel. Call FetchWaveform to obtain the waveforms for
            other channels.
            </summary>
            <param name="maximumTime">Specifies the maximum time the end-user allows for this method to complete. Use
            PrecisionTimeSpan.Zero for immediate triggering and PrecisionTimeSpan.MaxTime for an infinite timeout.</param>
            <param name="waveform">The waveform object into which the measurement data is stored. The waveform memory may
            be allocated before calling this method, or during the call to this method. To allocate memory before calling
            this method, create a waveform object using the CreateWaveformSByte method and set the waveform parameter
            to that waveform object. To allocate memory during the call to this method, set the waveform parameter to
            (IWaveform&lt;SByte&gt;)null. Note that this is critically different than setting waveforms to null, which
            generates a build error.</param>
            <returns>A waveform object containing the measurement data.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelMeasurement.ReadWaveform(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.IWaveform{System.Int16})">
            <summary>
            Initiates an acquisition on all enabled channels, waits (up to maximumTime) for the acquisition
            to complete, and returns the waveform for this channel. Call FetchWaveform to obtain the waveforms for
            other channels.
            </summary>
            <param name="maximumTime">Specifies the maximum time the end-user allows for this method to complete. Use
            PrecisionTimeSpan.Zero for immediate triggering and PrecisionTimeSpan.MaxTime for an infinite timeout.</param>
            <param name="waveform">The waveform object into which the measurement data is stored. The waveform memory may
            be allocated before calling this method, or during the call to this method. To allocate memory before calling
            this method, create a waveform object using the Create Waveform Int16 method and set the waveform parameter
            to that waveform object. To allocate memory during the call to this method, set the waveform parameter to
            (IWaveform&lt;Int16&gt;)null. Note that this is critically different than setting waveforms to null, which
            generates a build error.</param>
            <returns>A waveform object containing the measurement data.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelMeasurement.ReadWaveform(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.IWaveform{System.Int32})">
            <summary>
            Initiates an acquisition on all enabled channels, waits (up to maximumTime) for the acquisition
            to complete, and returns the waveform for this channel. Call FetchWaveform to obtain the waveforms for
            other channels.
            </summary>
            <param name="maximumTime">Specifies the maximum time the end-user allows for this method to complete. Use
            PrecisionTimeSpan.Zero for immediate triggering and PrecisionTimeSpan.MaxTime for an infinite timeout.</param>
            <param name="waveform">The waveform object into which the measurement data is stored. The waveform memory may
            be allocated before calling this method, or during the call to this method. To allocate memory before calling
            this method, create a waveform object using the Create Waveform Int32 method and set the waveform parameter
            to that waveform object. To allocate memory during the call to this method, set the  waveform parameter to
            (IWaveform&lt;Int32&gt;)null. Note that this is critically different than setting waveforms to null, which
            generates a build error.</param>
            <returns>A waveform object containing the measurement data.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelMeasurement.ReadWaveform(Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.IWaveform{System.Double})">
            <summary>
            Initiates an acquisition on all enabled channels, waits (up to maximumTime) for the acquisition
            to complete, and returns the waveform for this channel. Call FetchWaveform to obtain the waveforms for
            other channels.
            </summary>
            <param name="maximumTime">Specifies the maximum time the end-user allows for this method to complete. Use
            PrecisionTimeSpan.Zero for immediate triggering and PrecisionTimeSpan.MaxTime for an infinite timeout.</param>
            <param name="waveform">The waveform object into which the measurement data is stored. The waveform memory may
            be allocated before calling this method, or during the call to this method. To allocate memory before calling
            this method, create a waveform object using the Create Waveform Double method and set the waveform parameter
            to that waveform object. To allocate memory during the call to this method, set the  waveform parameter to
            (IWaveform&lt;Double&gt;)null. Note that this is critically different than setting waveforms to null, which
            generates a build error.</param>
            <returns>A waveform object containing the measurement data.</returns>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerChannelMultiRecordMeasurement">
            <summary>
            IVI Digitizer class-compliant multi-record measurement interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelMultiRecordMeasurement.FetchMultiRecordWaveform(System.Int64,System.Int64,System.Int64,System.Int64,Ivi.Digitizer.IWaveformCollection{System.SByte})">
            <summary>
            This method returns the (multi-record) waveform the digitizer acquired for the specified channel. The
            waveform is from a previously initiated acquisition.
            </summary>
            <param name="firstRecord">Specifies the number of the first record to read.</param>
            <param name="numberOfRecords">Specifies the number of consecutive records to read.</param>
            <param name="offsetWithinRecord">Specifies the start index within the record from which the data should
            be retrieved.</param>
            <param name="numberOfPointsPerRecord">Specifies the number of data points per record to return. This number
            may be larger than the amount of data available.</param>
            <param name="waveforms">A Waveform collection object with a particular number of waveforms, each with data
            of a particular size needed only for reusing waveform object across reads. The waveform collection memory
            may allocated before calling this method, or during the call to this method. To allocate memory before
            calling this method, create a waveform collection object using the CreateWaveformCollectionSByte method and
            set the waveforms parameter to that waveform collection. To allocate memory during the call to this method,
            set the  waveforms parameter to (IWaveformCollection&lt;SByte&gt;)null. Note that this is critically different
            than setting waveforms to null, which generates a build error.</param>
            <returns>A Waveform collection object with the specified waveforms.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelMultiRecordMeasurement.FetchMultiRecordWaveform(System.Int64,System.Int64,System.Int64,System.Int64,Ivi.Digitizer.IWaveformCollection{System.Int16})">
            <summary>
            This method returns the (multi-record) waveform the digitizer acquired for the specified channel. The
            waveform is from a previously initiated acquisition.
            </summary>
            <param name="firstRecord">Specifies the number of the first record to read.</param>
            <param name="numberOfRecords">Specifies the number of consecutive records to read.</param>
            <param name="offsetWithinRecord">Specifies the start index within the record from which the data should
            be retrieved.</param>
            <param name="numberOfPointsPerRecord">Specifies the number of data points per record to return. This number
            may be larger than the amount of data available.</param>
            <param name="waveforms">A Waveform collection object with a particular number of waveforms, each with data
            of a particular size needed only for reusing waveform object across reads. The waveform collection memory
            may allocated before calling this method, or during the call to this method. To allocate memory before
            calling this method, create a waveform collection object using the Create Waveform Collection Int16 method and
            set the waveforms parameter to that waveform collection. To allocate memory during the call to this method,
            set the  waveforms parameter to (IWaveformCollection&lt;Int16&gt;)null. Note that this is critically different
            than setting waveforms to null, which generates a build error.</param>
            <returns>A Waveform collection object with the specified waveforms.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelMultiRecordMeasurement.FetchMultiRecordWaveform(System.Int64,System.Int64,System.Int64,System.Int64,Ivi.Digitizer.IWaveformCollection{System.Int32})">
            <summary>
            This method returns the (multi-record) waveform the digitizer acquired for the specified channel. The
            waveform is from a previously initiated acquisition.
            </summary>
            <param name="firstRecord">Specifies the number of the first record to read.</param>
            <param name="numberOfRecords">Specifies the number of consecutive records to read.</param>
            <param name="offsetWithinRecord">Specifies the start index within the record from which the data should
            be retrieved.</param>
            <param name="numberOfPointsPerRecord">Specifies the number of data points per record to return. This number
            may be larger than the amount of data available.</param>
            <param name="waveforms">A Waveform collection object with a particular number of waveforms, each with data
            of a particular size needed only for reusing waveform object across reads. The waveform collection memory
            may allocated before calling this method, or during the call to this method. To allocate memory before
            calling this method, create a waveform collection object using the Create Waveform Collection Int32 method and
            set the waveforms parameter to that waveform collection. To allocate memory during the call to this method,
            set the  waveforms parameter to (IWaveformCollection&lt;Int32&gt;)null. Note that this is critically different
            than setting waveforms to null, which generates a build error.</param>
            <returns>A Waveform collection object with the specified waveforms.</returns>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerChannelMultiRecordMeasurement.FetchMultiRecordWaveform(System.Int64,System.Int64,System.Int64,System.Int64,Ivi.Digitizer.IWaveformCollection{System.Double})">
            <summary>
            This method returns the (multi-record) waveform the digitizer acquired for the specified channel. The
            waveform is from a previously initiated acquisition.
            </summary>
            <param name="firstRecord">Specifies the number of the first record to read.</param>
            <param name="numberOfRecords">Specifies the number of consecutive records to read.</param>
            <param name="offsetWithinRecord">Specifies the start index within the record from which the data should
            be retrieved.</param>
            <param name="numberOfPointsPerRecord">Specifies the number of data points per record to return. This number
            may be larger than the amount of data available.</param>
            <param name="waveforms">A Waveform collection object with a particular number of waveforms, each with data
            of a particular size needed only for reusing waveform object across reads. The waveform collection memory
            may allocated before calling this method, or during the call to this method. To allocate memory before
            calling this method, create a waveform collection object using the Create Waveform Collection Double method and
            set the waveforms parameter to that waveform collection. To allocate memory during the call to this method,
            set the  waveforms parameter to (IWaveformCollection&lt;Double&gt;)null. Note that this is critically different
            than setting waveforms to null, which generates a build error.</param>
            <returns>A Waveform collection object with the specified waveforms.</returns>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerChannelCollection">
            <summary>
            IVI Digitizer class-compliant channel collection interface.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerMultiArm">
            <summary>
            IVI Digitizer class-compliant multi-arm interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerMultiArm.Configure(System.String,Ivi.Digitizer.ArmSourceOperator)">
            <summary>
            Configures the digitizer to arm based on multiple arm sources. The digitizer can be instructed to arm when
            any one of multiple arm source conditions are met or when all specified arm source conditions are met.
            </summary>
            <param name="sourceList">A comma separated list of source names to be used in a multi arm scenario. The
            driver uses this value to set the Arm Source List property.</param>
            <param name="sourceOperator">Specifies the boolean operation to apply to the arm sources specified by the
            SourceList parameter. The driver uses this value to set the Arm Source Operator property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerMultiArm.SourceList">
            <summary>
            A comma separated list of source names to be used in a multi arm scenario. This property only affects
            instrument behavior when the Arm Source Operator property is set to AND or OR. When Arm Source Operator is
            set to AND, the arm conditions associated with each source in this list must be simultaneously satsified in
            order to arm the digitizer. When Arm Source Operator is set to OR, the first arm source in the list that
            satisfies its arm conditions will arm the digitizer. Any valid name used for the Arm Source property may be
            used in this list. An arm source may appear only once in the list. If a name in the list is not recognized,
            the driver throws the Unknown Channel Name exception. See IVI-3.2 for the definition of this error.
            [Refer to the instrument driver documentation for valid values, which may include
            one or more of the standard values defined in Ivi.Driver.TriggerSource.]
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerMultiArm.SourceOperator">
            <summary>
            The logical operation to apply to the arm sources specified by the Arm Source List property. See
            the definition of that property for details.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerMultiTrigger">
            <summary>
            IVI Digitizer class-compliant multi-trigger interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerMultiTrigger.Configure(System.String,Ivi.Digitizer.TriggerSourceOperator)">
            <summary>
            Configures the digitizer to trigger based on multiple trigger sources. The digitizer can be instructed to
            trigger when any one of multiple trigger source conditions are met or when all specified trigger source
            conditions are met.
            </summary>
            <param name="sourceList">A comma separated list of source names to be used in a multi trigger scenario.
            The driver uses this value to set the Trigger Source List property.</param>
            <param name="sourceOperator">Specifies the boolean operation to apply to the trigger sources specified by
            the SourceList parameter. The driver uses this value to set the Trigger Source Operator property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerMultiTrigger.SourceList">
            <summary>
            A comma separated list of source names to be used in a multi trigger scenario. This property only affects
            instrument behavior when the Trigger Source Operator property is set to AND or OR. When Trigger Source
            Operator is set to AND, the trigger conditions associated with each source in this list must be
            simultaneously satsified in order to trigger the digitizer. When Trigger Source Operator is set to OR, the
            first trigger source in the list that satisfies its trigger conditions will trigger the digitizer. Any
            valid name used for the Trigger Source property may be used in this list. A trigger source may appear only
            once in the list. If a name in the list is not recognized, the driver throws the Unknown Channel Name
            exception. See IVI-3.2 for the definition of this error.
            [Refer to the instrument driver documentation for valid values, which may include
            one or more of the standard values defined in Ivi.Driver.TriggerSource.]
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerMultiTrigger.SourceOperator">
            <summary>
            The logical operation to apply to the arm sources specified by the Arm Source List property. See
            the definition of that property for details.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerReferenceOscillator">
            <summary>
            IVI Digitizer class-compliant reference oscillator interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerReferenceOscillator.Configure(Ivi.Digitizer.ReferenceOscillatorSource,System.Double)">
            <summary>
            Configures the digitizer's reference oscillator.
            </summary>
            <param name="source">Specifies the source of the reference frequency signal. The driver uses this value
            to set the Reference Oscillator Source property. See the property description for more details.</param>
            <param name="frequency">Specifies the frequency of the external reference oscillator. This parameter is
            only used if the Source is set to External. The driver uses this value to set the Reference Oscillator
            Frequency property. See the property description for more details.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerReferenceOscillator.ExternalFrequency">
            <summary>
            The frequency of the external signal which is used as a frequency reference. This value is used only
            if the Reference Oscillator Source property is set to External. The units are Hertz.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerReferenceOscillator.OutputEnabled">
            <summary>
            Specifies whether or not the reference frequency signal appears at an output of the digitizer.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerReferenceOscillator.Source">
            <summary>
            The reference oscillator source used.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerSampleClock">
            <summary>
            IVI Digitizer class-compliant sample clock interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerSampleClock.Configure(Ivi.Digitizer.SampleClockSource,System.Double,System.Double)">
            <summary>
            Configures the digitizer's sample clock.
            </summary>
            <param name="source">Specifies the source of the sample clock signal. The driver uses this value to set
            the Sample Clock Source property.</param>
            <param name="frequency">Specifies the frequency of the external sample clock. This parameter is only used
            if the Sample Clock Source property is set to External. The driver uses this value to set the External
            Sample Clock Frequency property.</param>
            <param name="divider">Specifies the value by which the external sample clock should be divided. This value
            is used only if the Sample Clock Source property is set to External.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerSampleClock.ExternalDivider">
            <summary>
            Specifies the value by which the external sample clock should be divided. This value is used only if the
            Sample Clock Source property is set to External.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerSampleClock.ExternalFrequency">
            <summary>
            The frequency of the external signal which is as a sample clock. This value is used only if the
            Sample Clock Source property is set to External. The units are Hertz.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerSampleClock.OutputEnabled">
            <summary>
            Specifies whether or not the sample clock appears at a reference output of the digitizer.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerSampleClock.Source">
            <summary>
            The source of the clock used to pace acquisition sampling.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerTemperature">
            <summary>
            IVI Digitizer class-compliant temperature interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTemperature.BoardTemperature">
            <summary>
            The temperature of the entire board. The units are governed by the Temperature Units property.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTemperature.Units">
            <summary>
            The temperature units returned by the Board Temperature and the Channel Temperature properties.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerTrigger">
            <summary>
            IVI Digitizer class-compliant trigger interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerTrigger.SendSoftwareTrigger">
            <summary>
            Refer to IVI-3.3: Standard Cross-Class Capabilities Specification for the prototype and complete description
            of this method.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTrigger.ActiveSource">
            <summary>
            The source the digitizer monitors for the trigger event. The value specified here must be one
            of the valid repeated capability names for the TriggerSource repeated capability.
            [Refer to the instrument driver documentation for valid values, which may include
            one or more of the standard values defined in Ivi.Driver.TriggerSource.]
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTrigger.Delay">
            <summary>
            The length of time from the trigger event to the first point in the waveform record. If the value
            is positive, the first point in the waveform record occurs after the trigger event. If the value is
            negative, the first point in the waveform record occurs before the trigger event.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTrigger.Holdoff">
            <summary>
            The length of time the digitizer waits after it detects a trigger until the digitizer enables the
            trigger subsystem to detect another trigger. The Trigger Holdoff property affects instrument operation
            only when the digitizer requires multiple acquisitions to build a complete waveform. If Trigger Holdoff and
            PreTriggerSamples are both non-zero, then both conditions must be satisfied before the digitizer will
            accept a trigger. Note: Many digitizers have a small, non-zero value as the minimum value for this property.
            To configure the instrument to use the shortest trigger hold-off, the user can specify a value of zero for
            this property. Therefore, the IVI Class-Compliant specific driver shall coerce any value between zero and
            the minimum value to the minimum value. No other coercion is allowed on this property.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTrigger.Modifier">
            <summary>
            The trigger modifier determines the digitizer's behavior in the absence of
            the configured trigger.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTrigger.MultiTrigger">
            <summary>
            Reference to the class-compliant IIviDigitizerMultiTrigger interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTrigger.OutputEnabled">
            <summary>
            Specifies whether or not an accepted trigger appears at an output of the digitizer.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTrigger.PretriggerSamples">
            <summary>
            The number of samples that must be collected before a trigger event will be recognized. The
            Pretrigger Samples property affects instrument operation only when the digitizer requires multiple
            acquisitions to build a complete waveform. If Trigger Holdoff and Pretrigger Samples are are both non-zero,
            then both conditions must be satisfied before the digitizer will accept a trigger.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTrigger.Sources">
            <summary>
            Reference to the IIviDigitizerTriggerSourceCollection interface.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerTriggerRunt">
            <summary>
            IVI Digitizer class-compliant runt triggering interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerTriggerRunt.Configure(System.Double,System.Double,Ivi.Digitizer.RuntPolarity)">
            <summary>
            This method configures the runt trigger. A runt trigger occurs when the trigger signal crosses one of
            the runt thresholds twice without crossing the other runt threshold. The end-user specifies the runt
            thresholds with the RuntLowThreshold and RuntHighThreshold parameters. The end-user specifies the polarity
            of the runt with the RuntPolarity parameter. This method affects instrument behavior only if the trigger
            type is Runt Trigger. Set the Trigger Type and Trigger Coupling before calling this method.
            </summary>
            <param name="thresholdLow">The runt triggering low threshold. This value sets the TriggerRunt ThresholdLow property.</param>
            <param name="thresholdHigh">The runt triggering high threshold. This value sets the TriggerRunt ThresholdHigh property.</param>
            <param name="polarity">The runt triggering polarity. This value sets the TriggerRunt Polarity property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerRunt.Polarity">
            <summary>
            The runt polarity.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerRunt.ThresholdHigh">
            <summary>
            The runt triggering high threshold in Volts.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerRunt.ThresholdLow">
            <summary>
            The runt triggering low threshold in Volts.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerTriggerSource">
            <summary>
            IVI Digitizer class-compliant trigger source interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerSource.Coupling">
            <summary>
            Specifies how the digitizer couples the trigger source.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerSource.Edge">
            <summary>
            Reference to the class-compliant IIviDigitizerTriggerEdge interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerSource.Glitch">
            <summary>
            Reference to the class-compliant IIviDigitizerTriggerGlitch interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerSource.Hysteresis">
            <summary>
            The trigger hysteresis in Volts.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerSource.Level">
            <summary>
            The voltage threshold for the trigger sub-system. The units are Volts. This property affects
            instrument behavior only when the Trigger Type is set to one of the following values: Edge, Glitch,
            or Width.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerSource.Runt">
            <summary>
            Reference to the class-compliant IIviDigitizerTriggerRunt interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerSource.Type">
            <summary>
            The kind of event that triggers the digitizer.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerSource.TV">
            <summary>
            Reference to the class-compliant IIviDigitizerTriggerTV interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerSource.Width">
            <summary>
            Reference to the class-compliant IIviDigitizerTriggerWidth interface.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerSource.Window">
            <summary>
            Reference to the class-compliant IIviDigitizerTriggerWindow interface.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerTriggerSourceCollection">
            <summary>
            IVI Digitizer class-compliant trigger source collection interface.
            [Refer to the instrument driver documentation for valid trigger source names, which may include
            one or more of the standard values defined in Ivi.Driver.TriggerSource.]
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerTriggerTV">
            <summary>
            IVI Digitizer class-compliant TV triggering interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerTriggerTV.Configure(Ivi.Digitizer.TVSignalFormat,Ivi.Digitizer.TVTriggerEvent,Ivi.Digitizer.TVTriggerPolarity)">
            <summary>
            This method configures the digitizer for TV triggering. It configures the TV signal format, the event
            and the signal polarity. This method affects instrument behavior only if the Trigger Type property is TV.
            Set the Trigger Type and Trigger Coupling properties before calling this method. 
            </summary>
            <param name="signalFormat">Specifies the TV trigger signal format. This value sets the TV Trigger Signal
            Format property.</param>
            <param name="triggerEvent">Specifies the TV trigger event. This value sets the TV Trigger Event property.</param>
            <param name="polarity">Specifies the polarity of the TV trigger. This value sets the TV Trigger Polarity
            property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerTV.LineNumber">
            <summary>
            The line on which the digitizer triggers. The driver uses this property when the TV Trigger Event
            is set to TV Event Line Number. The line number setting is independent of the field. This means that to
            trigger on the first line of the second field, the user must configure the line number to the value of 263
            (if we presume that field one had 262 lines).
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerTV.Polarity">
            <summary>
            The polarity of the TV signal.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerTV.SignalFormat">
            <summary>
            The format of TV signal on which the digitizer triggers.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerTV.TriggerEvent">
            <summary>
            The event on which the digitizer triggers.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerTriggerWidth">
            <summary>
            IVI Digitizer class-compliant width triggering interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerTriggerWidth.Configure(System.Double,Ivi.Driver.PrecisionTimeSpan,Ivi.Driver.PrecisionTimeSpan,Ivi.Digitizer.WidthPolarity,Ivi.Digitizer.WidthCondition)">
            <summary>
            Configures the width trigger level, thresholdLow, thresholdHigh, polarity, and condition. A width
            trigger occurs when a pulse, that passes through level, with a width between or outside, the width
            thresholds is detected.
            </summary>
            <param name="level">Trigger Level. This value sets the Trigger Level property.</param>
            <param name="thresholdLow">Sets the width triggering low threshold. This value sets the Width Low
            Threshold property.</param>
            <param name="thresholdHigh">Sets the width triggering high threshold. This value sets the Width High
            Threshold property.</param>
            <param name="polarity">Sets the width polarity. This value sets the Width Polarity property.</param>
            <param name="condition">Specifies whether a pulse that is within or outside the user-specified thresholds
            trigger waveform acquisition. This value sets the Width Condition property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerWidth.Condition">
            <summary>
            Specifies whether a pulse that is within or outside the high and low thresholds triggers the digitizer.
            The end-user specifies the high and low thresholds with the Width High Threshold and Width Low Threshold
            properties.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerWidth.Polarity">
            <summary>
            The polarity of the pulse that triggers the digitizer.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerWidth.ThresholdHigh">
            <summary>
            The high width threshold time.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerWidth.ThresholdLow">
            <summary>
            The low width threshold time.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IIviDigitizerTriggerWindow">
            <summary>
            IVI Digitizer class-compliant window triggering interface.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IIviDigitizerTriggerWindow.Configure(System.Double,System.Double,Ivi.Digitizer.WindowCondition)">
            <summary>
            Configures the window trigger thresholdLow, thresholdHigh, and condition. A window trigger occurs
            when a signal that enters or leaves a given voltage range is detected.
            </summary>
            <param name="thresholdLow">Sets the window triggering low threshold in Volts. This value sets the Window Low
            Threshold property.</param>
            <param name="thresholdHigh">Sets the window triggering high threshold in Volts. This value sets the Window
            High Threshold property.</param>
            <param name="condition">Specifies whether a pulse that is within or outside the user-specified thresholds
            trigger waveform acquisition. This value sets the Width Condition property.</param>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerWindow.Condition">
            <summary>
            Specifies whether a signal that is entering or leaving the voltage window defined by the high and low
            thresholds triggers the digitizer. The end-user specifies the high and low thresholds with the Window High
            Threshold and Window Low Threshold properties.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerWindow.ThresholdHigh">
            <summary>
            The high window threshold voltage in Volts.
            </summary>
        </member>
        <member name="P:Ivi.Digitizer.IIviDigitizerTriggerWindow.ThresholdLow">
            <summary>
            The low window threshold voltage in Volts.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.IviDigitizer">
            <summary>
            The IviDigitizer class allows clients to create instances of drivers that implement the class-compliant
            IviDigitizer interfaces, based on information in the IVI configuration store.  This allows clients to
            interchange IVI.NET class-compliant IviDigitizer drivers without modifying or rebuilding the client program
            source code.
            </summary>
        </member>
        <member name="M:Ivi.Digitizer.IviDigitizer.Create(System.String)">
            <summary>
            Create an instance of an IviDigitizer class-compliant driver and return an IIviDigitizer reference to the
            caller.  The creation process uses the IVI configuration store to map a logical name or driver session
            name to the main driver class of the corresponding specific driver.  The driver is initialized using
            information from the IVI configuration store and the idQuery and reset parameters.
            </summary>
            <param name="name">An IVI configuration store logical name or driver session name that refers to the
            IVI.NET class-compliant IviDigitizer driver to be created.</param>
            <returns>
            An IIviDigitizer interface reference for the specific driver that is referred to by the provided IVI
            configuration store logical name or driver session name.
            </returns>
        </member>
        <member name="M:Ivi.Digitizer.IviDigitizer.Create(System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an instance of an IviDigitizer class-compliant driver and return an IIviDigitizer reference to the
            caller.  The creation process uses the IVI configuration store to map a logical name or driver session
            name to the main driver class of the corresponding specific driver.  The driver is initialized using
            information from the IVI configuration store and the idQuery and reset parameters.
            </summary>
            <param name="name">An IVI configuration store logical name or driver session name that refers to the
            IVI.NET class-compliant IviDigitizer driver to be created.</param>
            <param name="idQuery">If true, verify the ID of the instrument.</param>
            <param name="reset">If true, reset the instrument.</param>
            <returns>
            An IIviDigitizer interface reference for the specific driver that is referred to by the provided IVI
            configuration store logical name or driver session name.
            </returns>
        </member>
        <member name="M:Ivi.Digitizer.IviDigitizer.Create(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create an instance of an IviDigitizer class-compliant driver and return an IIviDigitizer reference to the
            caller.  The creation process uses the IVI configuration store to map a logical name or driver session
            name to the main driver class of the corresponding specific driver.  The driver is initialized using
            information from the IVI configuration store and the idQuery, reset, and options parameters.
            </summary>
            <param name="name">An IVI configuration store logical name or driver session name that refers to the
            IVI.NET class-compliant IviDigitizer driver to be created.</param>
            <param name="idQuery">If true, verify the ID of the instrument.</param>
            <param name="reset">If true, reset the instrument.</param>
            <param name="options">A comma-separated list of option assignments.  An options assignment has the form
            "OptionName=Value", where OptionName is one of: 'Cache', 'InterchangeCheck', 'QueryInstrStatus',
            'RangeCheck', 'RecordCoercions', 'Simulate', or 'DriverSetup'.  With the exception of DriverSetup, all
            of the options accept values of 'true' or 'false'.  'DriverSetup' is a string, and must be last in the
            list.  The method assumes that everything following 'DriverSetup=' is part of the assignment.  The
            DriverSetup string is meaningful only to the specific driver being instantiated.
            </param>
            <returns>
            An IIviDigitizer interface reference for the specific driver that is referred to by the provided IVI
            configuration store logical name or driver session name.
            </returns>
            <remarks>
            Examples of legal values for the options parameter are:
            <para>*  ""</para>
            <para>*  "Simulate=true"</para>
            <para>*  "Simulate=true,Cache=false,QueryInstrStatus=false"</para>
            <para>*  "Simulate=true,Cache=false,DriverSetup=Trace=false"</para>
            <para>Note that 'Simulate', 'Cache', and 'QueryInstrStatus' are standard IVI features, while
            'Trace=false' is meaningful only to the specific driver being instantiated.</para>
            </remarks>
        </member>
        <member name="M:Ivi.Digitizer.IviDigitizer.Create(System.String,System.Boolean,System.Boolean,Ivi.Driver.LockType,System.String,System.String)">
            <summary>
            Create an instance of an IviDigitizer class-compliant driver and return an IIviDigitizer reference to the
            caller.  The creation process uses the IVI configuration store to map a logical name or driver session
            name to the main driver class of the corresponding specific driver.  The driver is initialized using
            information from the IVI configuration store and the idQuery, reset, and options parameters.
            </summary>
            <param name="name">An IVI configuration store logical name or driver session name that refers to the
            IVI.NET class-compliant IviDigitizer driver to be created.</param>
            <param name="idQuery">If true, verify the ID of the instrument.</param>
            <param name="reset">If true, reset the instrument.</param>
            <param name="lockType">Specifies whether to use .NET AppDomain-wide locking or machine-wide locking.</param>
            <param name="accessKey">Specifies a user-selectable access key to identify the lock.  Driver instances 
            that are created with the same accessKey will be protected from simultaneous access by multiple threads 
            within a process or across processes, depending upon the value of the lockType parameter. </param>
            <param name="options">A comma-separated list of option assignments.  An options assignment has the form
            "OptionName=Value", where OptionName is one of: 'Cache', 'InterchangeCheck', 'QueryInstrStatus',
            'RangeCheck', 'RecordCoercions', 'Simulate', or 'DriverSetup'.  With the exception of DriverSetup, all
            of the options accept values of 'true' or 'false'.  'DriverSetup' is a string, and must be last in the
            list.  The method assumes that everything following 'DriverSetup=' is part of the assignment.  The
            DriverSetup string is meaningful only to the specific driver being instantiated.
            </param>
            <returns>
            An IIviDigitizer interface reference for the specific driver that is referred to by the provided IVI
            configuration store logical name or driver session name.
            </returns>
            <remarks>
            Examples of legal values for the options parameter are:
            <para>*  ""</para>
            <para>*  "Simulate=true"</para>
            <para>*  "Simulate=true,Cache=false,QueryInstrStatus=false"</para>
            <para>*  "Simulate=true,Cache=false,DriverSetup=Trace=false"</para>
            <para>Note that 'Simulate', 'Cache', and 'QueryInstrStatus' are standard IVI features, while
            'Trace=false' is meaningful only to the specific driver being instantiated.</para>
            </remarks>
        </member>
        <member name="T:Ivi.Digitizer.IWaveformCollection`1">
            <summary>
            An interface designed to encapsulate a collection of objects that implement Ivi.Driver.IWaveform.
            </summary>
            <typeparam name="T">An IVI.NET standard arithmetic type.</typeparam>
        </member>
        <member name="P:Ivi.Digitizer.IWaveformCollection`1.Item(System.Int64)">
            <summary>
            This returns the waveform at the specified index in the waveform collection.
            </summary>
            <param name="index">The index of the waveform to be returned from the waveform collection.</param>
            <returns>The waveform to be returned from the waveform collection.</returns>
        </member>
        <member name="P:Ivi.Digitizer.IWaveformCollection`1.ValidWaveformCount">
            <summary>
            The number of valid waveform objects in the waveform collection.  If there are n valid waveforms, the
            valid indexes for those waveforms range from 0 to n-1.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.ReferenceOscillatorSource">
            <summary>
            Defined values for the reference oscillator source.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.ReferenceOscillatorSource.Internal">
            <summary>
            The internal reference oscillator is used.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.ReferenceOscillatorSource.External">
            <summary>
            An external reference oscillator is used.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.ReferenceOscillatorSource.PxiClk10">
            <summary>
            A PXI 10MHz clock line is used.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.ReferenceOscillatorSource.PxiExpressClk100">
            <summary>
            A PXI Express 100MHz clock line is used.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.RuntPolarity">
            <summary>
            Defined values for runt arm/trigger polarity.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.RuntPolarity.Positive">
            <summary>
            The digitizer arms/triggers on a positive runt. A positive runt occurs when a rising edge crosses the low
            runt threshold and does not cross the high runt threshold before re-crossing the low runt threshold.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.RuntPolarity.Negative">
            <summary>
            The digitizer arms/triggers on a negative runt. A negative runt occurs when a falling edge crosses the high
            runt threshold and does not cross the low runt threshold before re-crossing the high runt threshold.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.RuntPolarity.Either">
            <summary>
            The digitizer arms/triggers on either a positive or negative runt.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.SampleClockSource">
            <summary>
            Defined values for the sample clock source.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.SampleClockSource.Internal">
            <summary>
            The internal sample clock is used.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.SampleClockSource.External">
            <summary>
            An external sample clock is used.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.SampleMode">
            <summary>
            Defined values for acquisition sample mode.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.SampleMode.RealTime">
            <summary>
            Real-time sampling is used.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.SampleMode.EquivalentTime">
            <summary>
            Equivalent-time sampling is used.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.TemperatureUnits">
            <summary>
            Defined values for the temperature units.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TemperatureUnits.Celsius">
            <summary>
            Temperature values returned from the digitizer are in degrees Celsius.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TemperatureUnits.Fahrenheit">
            <summary>
            Temperature values returned from the digitizer are in degrees Fahrenheit.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TemperatureUnits.Kelvin">
            <summary>
            Temperature values returned from the digitizer are in degrees Kelvin.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.TriggerCoupling">
            <summary>
            Defined values for arm/trigger coupling.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerCoupling.AC">
            <summary>
            The digitizer AC couples the arm/trigger signal.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerCoupling.DC">
            <summary>
            The digitizer DC couples the arm/trigger signal.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerCoupling.HFReject">
            <summary>
            The digitizer filters out the high frequencies from the arm/trigger signal.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerCoupling.LFReject">
            <summary>
            The digitizer filters out the low frequencies from the arm/trigger signal.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerCoupling.NoiseReject">
            <summary>
            The digitizer filters out the noise from the arm/trigger signal.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.TriggerModifier">
            <summary>
            Defined values for trigger modifier.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerModifier.None">
            <summary>
            The digitizer waits until the trigger the end-user specifies occurs.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerModifier.Auto">
            <summary>
            The digitizer automatically triggers if the configured trigger does not occur within the digitizer timeout
            period.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerModifier.AutoLevel">
            <summary>
            The digitizer adjusts the trigger level if the trigger the end-user specifies does not occur.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.TriggerSourceOperator">
            <summary>
            Defined values for the trigger source operator.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerSourceOperator.And">
            <summary>
            Trigger sources are AND'd together. The digitizer triggers when all configured trigger source conditions
            are satisfied.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerSourceOperator.Or">
            <summary>
            Trigger sources are OR'd together. The digitizer triggers when the first configured trigger source
            condition is satisfied.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerSourceOperator.None">
            <summary>
            No operator is applied to the configured list of trigger sources. The trigger source list is ignored, and
            the digitizer triggers when the currently configured trigger source, given by the Active Trigger Source
            property, and its associated trigger conditions are satisfied.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.TriggerType">
            <summary>
            Defined values for trigger type.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerType.Edge">
            <summary>
            The digitizer is configured for edge triggering. An edge trigger occurs when the trigger signal specified
            with the Trigger Source property passes the voltage threshold specified with the Trigger Level property
            and has the slope specified with the Trigger Slope property.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerType.Width">
            <summary>
            The digitizer is configured for width triggering. Use the IviDigitizerWidthTrigger extension properties
            and methods to configure the trigger.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerType.Runt">
            <summary>
            The digitizer is configured for runt triggering. Use the IviDigitizerRuntTrigger extension properties and
            methods to configure the trigger.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerType.Glitch">
            <summary>
            The digitizer is configured for glitch triggering. Use the IviDigitizerGlitchTrigger extension properties
            and methods to configure the trigger.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerType.TV">
            <summary>
            The digitizer is configured for triggering on TV signals. Use the IviDigitizerTVTrigger extension
            properties and methods to configure the trigger.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TriggerType.Window">
            <summary>
            The digitizer is configured for window triggering. Use the IviDigitizerWindowTrigger extension properties
            and methods to configure the trigger.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.TVSignalFormat">
            <summary>
            Defined values for TV arm/trigger signal format.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TVSignalFormat.Ntsc">
            <summary>
            The digitizer arms/triggers on the NTSC signal format.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TVSignalFormat.Pal">
            <summary>
            The digitizer arms/triggers on the PAL signal format.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TVSignalFormat.Secam">
            <summary>
            The digitizer arms/triggers on the SECAM signal format.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.TVTriggerEvent">
            <summary>
            Defined values for TV arm/trigger event.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TVTriggerEvent.Field1">
            <summary>
            The digitizer arms/triggers on field 1 of the video signal.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TVTriggerEvent.Field2">
            <summary>
            The digitizer arms/triggers on field 2 of the video signal.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TVTriggerEvent.AnyField">
            <summary>
            The digitizer arms/triggers on any field.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TVTriggerEvent.AnyLine">
            <summary>
            The digitizer arms/triggers on any line.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TVTriggerEvent.LineNumber">
            <summary>
            The digitizer arms/triggers on a specific line number you specify with the TV Trigger Line Number
            property.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.TVTriggerPolarity">
            <summary>
            Defined values for TV arm/trigger polarity.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TVTriggerPolarity.Positive">
            <summary>
            The digitizer is configured to arm/trigger on a positive video sync pulse.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.TVTriggerPolarity.Negative">
            <summary>
            The digitizer is configured to arm/trigger on a negative video sync pulse.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.VerticalCoupling">
            <summary>
            Defined values for channel coupling.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.VerticalCoupling.AC">
            <summary>
            The digitizer AC couples the input signal.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.VerticalCoupling.DC">
            <summary>
            The digitizer DC couples the input signal.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.VerticalCoupling.Ground">
            <summary>
            The digitizer couples the channel to the ground.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.WidthCondition">
            <summary>
            Defined values for width arm/trigger condition.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.WidthCondition.Within">
            <summary>
            The digitizer is configured to arm/trigger on signals when they enter the given arming/triggering window.
            The end-user specifies the high and low thresholds with the Window Arm/Trigger High Threshold and
            Window Arm/Trigger Low Threshold properties.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.WidthCondition.Outside">
            <summary>
            The digitizer is configured to arm/trigger on signals when they leave the given arming/triggering window.
            The end-user specifies the high and low thresholds with the Window Arm/Trigger High Threshold and
            Window Arm/Trigger Low Threshold properties.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.WidthPolarity">
            <summary>
            Defined values for width arm/trigger polarity.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.WidthPolarity.Positive">
            <summary>
            The digitizer is configured to arm/trigger on positive pulses that have a width that meets the condition
            the user specifies with the Width Arm/Trigger Condition property.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.WidthPolarity.Negative">
            <summary>
            The digitizer is configured to arm/trigger on negative pulses that have a width that meets the condition
            the user specifies with the Width Arm/Trigger Condition property.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.WidthPolarity.Either">
            <summary>
            The digitizer is configured to arm/trigger on either positive or negative pulses that have a width that
            meets the condition the user specifies with the Width Arm/Trigger Condition property.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.WindowCondition">
            <summary>
            Defined values for window arm/trigger condition.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.WindowCondition.Entering">
            <summary>
            The digitizer is configured to arm/trigger on pulses that have a width that is less than the high
            threshold and greater than the low threshold. The end-user specifies the high and low thresholds with
            the Window Arm/Trigger High Threshold and Window Arm/Trigger Low Threshold properties.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.WindowCondition.Leaving">
            <summary>
            The digitizer is configured to arm/trigger on pulses that have a width that is either greater than the
            high threshold or less than a low threshold. The end-user specifies the high and low thresholds with
            the Window Arm/Trigger High Threshold and Window Arm/Trigger Low Threshold properties.
            </summary>
        </member>
        <member name="T:Ivi.Digitizer.Slope">
            <summary>IVI Digitizer values for slope.</summary>
        </member>
        <member name="F:Ivi.Digitizer.Slope.Positive">
            <summary>
            Positive slope.
            </summary>
        </member>
        <member name="F:Ivi.Digitizer.Slope.Negative">
            <summary>
            Negative slope.
            </summary>
        </member>
    </members>
</doc>
